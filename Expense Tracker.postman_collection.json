{
	"info": {
		"_postman_id": "96a3bc7f-f288-447e-b187-2f15bbf2107b",
		"name": "Expense Tracker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1556140",
		"_collection_link": "https://realestate-erp-crm.postman.co/workspace/RealEstate-ERP-CRM~ab93a437-bdaf-42b6-baf0-ff94f0a254fd/collection/1556140-96a3bc7f-f288-447e-b187-2f15bbf2107b?action=share&source=collection_link&creator=1556140"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"token\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"raja\",\n    \"password\":\"Test@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servername}}/api/auth/login",
							"host": [
								"{{servername}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Generated from cURL: curl -X POST -d \"username=user1\" -d \"password=password1\" http://localhost:8095/login -c cookies.txt\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "File Handling",
			"item": [
				{
					"name": "Upload File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"fileUuid\", jsonData.fileUuid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/bsridharpatnaik/Downloads/Pricing.jpg"
								}
							]
						},
						"url": {
							"raw": "{{servername}}/api/file/upload",
							"host": [
								"{{servername}}"
							],
							"path": [
								"api",
								"file",
								"upload"
							],
							"query": [
								{
									"key": "file",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DownloadFile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servername}}/file/download/{{fileUuid}}",
							"host": [
								"{{servername}}"
							],
							"path": [
								"file",
								"download",
								"{{fileUuid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transaction",
			"item": [
				{
					"name": "Anonymous",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"txId\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Define the range of days (last 60 days)",
											"const daysAgoStart = 60;",
											"const daysAgoEnd = 1;",
											"",
											"// Generate a random number of days between 1 and 60",
											"const randomDaysAgo = Math.floor(Math.random() * (daysAgoEnd - daysAgoStart + 1)) + daysAgoStart;",
											"",
											"// Calculate the date",
											"const date = new Date();",
											"date.setDate(date.getDate() - randomDaysAgo);",
											"",
											"// Format the date in dd-MM-yyyy format",
											"const formattedDate = (\"0\" + date.getDate()).slice(-2) + \"-\" + (\"0\" + (date.getMonth() + 1)).slice(-2) + \"-\" + date.getFullYear();",
											"",
											"// Randomly choose between INCOME and EXPENSE",
											"const transactionTypes = [\"INCOME\", \"EXPENSE\"];",
											"const randomTypeIndex = Math.floor(Math.random() * transactionTypes.length);",
											"const randomTransactionType = transactionTypes[randomTypeIndex];",
											"",
											"// Set the variable for date",
											"pm.environment.set(\"randomDate\", formattedDate);",
											"",
											"// Set the variable for transaction type",
											"pm.environment.set(\"randomTransactionType\", randomTransactionType);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionType\":\"{{randomTransactionType}}\",   // possible values are Income/Expense\n    \"date\": \"{{randomDate}}\",\n    \"title\": \"Sample Transaction\",\n    \"party\": \"Sample Party\",\n    \"amount\": 1234.56,\n    \"files\": [\n        {\n            \"fileUuid\": \"e7e8f34a-cd16-4e6d-9c41-89f5a1a7e63b\",\n            \"filename\": \"file1.pdf\"\n        },\n        {\n            \"fileUuid\": \"c5d9e3b7-cc15-4b2c-a34b-d1f78d1c9c4d\",\n            \"filename\": \"file2.jpg\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servername}}/api/transaction",
									"host": [
										"{{servername}}"
									],
									"path": [
										"api",
										"transaction"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   // \"transactionType\":\"EXPENSE\",\n    //\"date\": \"24-08-2024\",\n    \"title\": \"Sample Transaction1\",\n    \"party\": \"Sample Party\",\n    \"amount\": 1234.56 /*,\n   \"files\": [\n        {\n            \"fileUuid\": \"e7e8f34a-cd16-4e6d-9c41-89f5a1a7e63b\",\n            \"filename\": \"file1.pdf\"\n        },\n        {\n            \"fileUuid\": \"c5d9e3b7-cc15-4b2c-a34b-d1f78d1c9c4d\",\n            \"filename\": \"file2.jpg\"\n        }\n    ]*/\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servername}}/api/transaction/{{txId}}",
									"host": [
										"{{servername}}"
									],
									"path": [
										"api",
										"transaction",
										"{{txId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Dashboard",
			"item": [
				{
					"name": "Fetch Daily",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servername}}/api/dashboard/summary",
							"host": [
								"{{servername}}"
							],
							"path": [
								"api",
								"dashboard",
								"summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch Daily - Logged In",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servername}}/api/dashboard/summary?dateOrMonth=2024-08-24",
							"host": [
								"{{servername}}"
							],
							"path": [
								"api",
								"dashboard",
								"summary"
							],
							"query": [
								{
									"key": "dateOrMonth",
									"value": "2024-08-24"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch Monthly",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servername}}/api/dashboard/summary?dateOrMonth=2024-08",
							"host": [
								"{{servername}}"
							],
							"path": [
								"api",
								"dashboard",
								"summary"
							],
							"query": [
								{
									"key": "dateOrMonth",
									"value": "2024-08"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Vault",
			"item": [
				{
					"name": "Get Files",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servername}}/api/vault",
							"host": [
								"{{servername}}"
							],
							"path": [
								"api",
								"vault"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add New Files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the range of days (last 60 days)",
									"const daysAgoStart = 60;",
									"const daysAgoEnd = 1;",
									"",
									"// Generate a random number of days between 1 and 60",
									"const randomDaysAgo = Math.floor(Math.random() * (daysAgoEnd - daysAgoStart + 1)) + daysAgoStart;",
									"",
									"// Calculate the date",
									"const date = new Date();",
									"date.setDate(date.getDate() - randomDaysAgo);",
									"",
									"// Format the date in dd-MM-yyyy format",
									"const formattedDate = (\"0\" + date.getDate()).slice(-2) + \"-\" + (\"0\" + (date.getMonth() + 1)).slice(-2) + \"-\" + date.getFullYear();",
									"",
									"// Randomly choose between INCOME and EXPENSE",
									"const transactionTypes = [\"INCOME\", \"EXPENSE\"];",
									"const randomTypeIndex = Math.floor(Math.random() * transactionTypes.length);",
									"const randomTransactionType = transactionTypes[randomTypeIndex];",
									"",
									"// Set the variable for date",
									"pm.environment.set(\"randomDate\", formattedDate);",
									"",
									"// Set the variable for transaction type",
									"pm.environment.set(\"randomTransactionType\", randomTransactionType);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUuid\": \"{{$randomUUID}}\",\n    \"filename\": \"{{$randomFileName}}\",\n    \"uploadDate\": \"{{randomDate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servername}}/api/vault/add",
							"host": [
								"{{servername}}"
							],
							"path": [
								"api",
								"vault",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the range of days (last 60 days)",
									"const daysAgoStart = 60;",
									"const daysAgoEnd = 1;",
									"",
									"// Generate a random number of days between 1 and 60",
									"const randomDaysAgo = Math.floor(Math.random() * (daysAgoEnd - daysAgoStart + 1)) + daysAgoStart;",
									"",
									"// Calculate the date",
									"const date = new Date();",
									"date.setDate(date.getDate() - randomDaysAgo);",
									"",
									"// Format the date in dd-MM-yyyy format",
									"const formattedDate = (\"0\" + date.getDate()).slice(-2) + \"-\" + (\"0\" + (date.getMonth() + 1)).slice(-2) + \"-\" + date.getFullYear();",
									"",
									"// Randomly choose between INCOME and EXPENSE",
									"const transactionTypes = [\"INCOME\", \"EXPENSE\"];",
									"const randomTypeIndex = Math.floor(Math.random() * transactionTypes.length);",
									"const randomTransactionType = transactionTypes[randomTypeIndex];",
									"",
									"// Set the variable for date",
									"pm.environment.set(\"randomDate\", formattedDate);",
									"",
									"// Set the variable for transaction type",
									"pm.environment.set(\"randomTransactionType\", randomTransactionType);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUuid\": \"{{$randomUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servername}}/api/vault/add",
							"host": [
								"{{servername}}"
							],
							"path": [
								"api",
								"vault",
								"add"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}